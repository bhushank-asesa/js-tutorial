2) Array
3) Object
6) let/var/const, hoisting and temporal Dead-zone
9) functions ,declarations, expression, programming, arrow function, IIFE, generator functions
10) this keyword with arrow function
11) call, apply, bind
16) currying
17) debounce and throttling
18) Event propagation and delegation
19) Bubbling 
20) Capturing
21) Prototype and prototype inheritance
22) Memoization  => recursive function and performance?
23) Polyfills
1) Execution and call stack 

4) String
5) Number 
7) scope and scope chaining 
8) Mutable/Immutable data types
12) callback and hell
13) promise and promise chaining and APIs(4); Promise.all => speed up?
14) async/await, async/defer
15) callback vs promise vs async/await
24) Event loop, micro-task, Macro-tasks
25) Web APIs
26) setTimeout, setInterval compare difference use cases
27) Working of JS Engine 
28) Javascript
29) ES6 and above 
30) Date, Math, Other, Loop, block 
---------------------------------------


31) String.prototype.repeat
32) Implement the compose() and pipe() polyfill .
33) Design patterns like singleton, factory patterns etc
34) Implement the publisher-subscriber pattern in javascript
35) Implement Async. parallel, Async.series which executes a set of async tasks parallel and in series
36) Implement thet Retry API 
37) How rendering work in the browser
38) Implement Memoization
39) Progressive Web application
40) Clone an Object
41) Implement clearAllTimeout()
42) Implement a function to flatten a nested array
43) Implement an LRU Cache
44) How does closure affect garbage collection in JavaScript?
45) Explain lexical scope in JavaScript and how it affects variable visibility. Provide examples to illustrate?
46) 10. How do you handle errors and exceptions in JavaScript? What are the best practices for error handling in asynchronous code with promises?
47)   Find the output of below code ?
console.log("Start");
 setTimeout(() => { 
console.log("Timeout"); 
}); 
Promise.resolve().then(() => console.log("Promise")); 
console.log("End");
---------------------------------------------------------------------------
48) 
2. Find the output ?
var x=10;
 function foo(){ 
var x = 5;
 console.log(x)
 } 
foo(); 
console.log(x)
---------------------------------------------------------------------------
49) Find the output ?
function x(){ 
for(var i=1;i<=5;i++){
 setTimeout(()=>{
 console.log(i) 
},i*1000) 
} }
x();
---------------------------------------------------------------------------
50) Find the output ?
function x(){
let a = 10;
 function d(){
 console.log(a); 
} 
a = 500;
 return d;
}
var z = x();
z();

---------------------------------------------------------------------------
51) Find the output ?

getData1() 
getData();
 function getData1(){
 console.log("getData11")
 } 
var getData = () => { 
console.log("Hello") 
}